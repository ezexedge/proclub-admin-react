{"version":3,"sources":["content/docs/ThemesCustomization/index.js","components/PageHeaderDocs/index.js"],"names":["ThemesCustomization","title","maxWidth","container","spacing","item","xs","heading","subheading","paragraph","showLineNumbers","wrapLines","language","style","a11yDark","variant","sx","mb","RootWrapper","experimentalStyled","Box","theme","PageHeader","rest","t","useTranslation","mt"],"mappings":"qJAAA,4FAqIeA,UA9Hf,WA0DE,OACE,cAAC,IAAD,CAAgBC,MAAM,qDAAtB,SACE,cAAC,IAAD,CAAWC,UAAU,EAArB,SACE,eAAC,IAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,UACE,cAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,GAAf,SACE,cAAC,IAAD,CACEC,QAAQ,uBACRC,WAAW,OAGf,eAAC,IAAD,CAAMH,MAAI,EAACC,GAAI,GAAf,UACE,cAAC,IAAD,CAAYG,WAAS,EAArB,+EAGA,eAAC,IAAD,CAAYA,WAAS,EAArB,sDAC2C,8CAD3C,IACoE,IAClE,+CAFF,QAE+B,8CAF/B,6CAGgC,kDAHhC,OAGgE,IAC9D,+CAJF,OAMA,cAAC,IAAD,CAAYA,WAAS,EAArB,qJAKA,uBACA,eAAC,IAAD,CAAYA,WAAS,EAArB,wDAC8C,IAC5C,+CAFF,oEAKA,cAAC,IAAD,CACEC,iBAAe,EACfC,WAAS,EACTC,SAAS,aACTC,MAAOC,IAJT,SAxFI,2WAgGJ,uBACA,cAAC,IAAD,CAAYC,QAAQ,KAAKC,GAAI,CAAEC,GAAI,GAAnC,4BAGA,cAAC,IAAD,CAAYR,WAAS,EAArB,8GAIA,eAAC,IAAD,CAAYA,WAAS,EAArB,yEAC+D,IAC7D,+CAFF,8DAGwB,IACtB,2EAJF,OAMA,cAAC,IAAD,CACEC,iBAAe,EACfC,WAAS,EACTC,SAAS,aACTC,MAAOC,IAJT,SApGO,ihD,uGCZbI,EAAcC,YAAmBC,IAAnBD,EAClB,gBAAGE,EAAH,EAAGA,MAAH,sCACoBA,EAAMjB,QAAQ,GADlC,UAwBakB,IAnBI,SAAC,GAAsC,IAApCf,EAAmC,EAAnCA,QAASC,EAA0B,EAA1BA,WAAee,EAAW,wCAC/CC,EAAMC,cAAND,EAER,OACE,eAACN,EAAD,2BAAiBK,GAAjB,cACGhB,GAAW,cAAC,IAAD,CAAYQ,QAAQ,KAApB,SAA0BS,EAAEjB,KACvCC,GACC,cAAC,IAAD,CAAYO,QAAQ,YAApB,SAAiCS,EAAEhB,KAErC,cAAC,IAAD,CAASQ,GAAI,CAAEU,GAAI","file":"static/js/130.9812f4e1.chunk.js","sourcesContent":["import { Container, Typography, Grid } from '@material-ui/core';\n\nimport ContentWrapper from 'src/components/ContentWrapper';\nimport PageHeader from 'src/components/PageHeaderDocs';\nimport { Prism } from 'react-syntax-highlighter';\nimport a11yDark from 'react-syntax-highlighter/dist/cjs/styles/prism/a11y-dark';\n\nfunction ThemesCustomization() {\n  const themeDir = `ðŸ“¦theme\n  â”£ ðŸ“‚schemes\n  â”ƒ â”£ ðŸ“œDarkSpacesTheme.ts\n  â”ƒ â”£ ðŸ“œGreyGooseTheme.ts\n  â”ƒ â”£ ðŸ“œLightBloomTheme.ts\n  â”ƒ â”£ ðŸ“œNebulaFighterTheme.ts\n  â”ƒ â”— ðŸ“œPureLightTheme.ts\n  â”£ ðŸ“œbase.ts\n  â”— ðŸ“œThemeProvider.tsx`;\n\n  const themeCustom = `const themeColors = {\n    primary: '#1975FF',\n    secondary: '#6E759F',\n    success: '#44D600',\n    warning: '#FFA319',\n    error: '#FF1943',\n    info: '#33C2FF',\n    black: '#223354',\n    white: '#ffffff',\n    primaryAlt: '#000C57'\n  };\n  \n  const colors = {\n    layout: {\n      sidebar: {\n        background: themeColors.primaryAlt,\n        textColor: themeColors.secondary,\n        dividerBg: '#353E7A',\n        menuItemColor: '#CCCEDD',\n        menuItemColorActive: '#ffffff',\n        menuItemBg: 'transparent',\n        menuItemBgActive: '#242E6F',\n        menuItemIconColor: themeColors.secondary,\n        menuItemIconColorActive: '#ffffff',\n        menuItemHeadingColor: themeColors.secondary\n      }\n    }\n  };\n  \n  export const LightBloomTheme = createMuiTheme({\n    direction: i18n.dir(),\n    colors: {\n    sidebar: {\n      background: colors.layout.sidebar.background,\n      textColor: colors.layout.sidebar.textColor,\n      dividerBg: colors.layout.sidebar.dividerBg,\n      menuItemColor: colors.layout.sidebar.menuItemColor,\n      menuItemColorActive: colors.layout.sidebar.menuItemColorActive,\n      menuItemBg: colors.layout.sidebar.menuItemBg,\n      menuItemBgActive: colors.layout.sidebar.menuItemBgActive,\n      menuItemIconColor: colors.layout.sidebar.menuItemIconColor,\n      menuItemIconColorActive: colors.layout.sidebar.menuItemIconColorActive,\n      menuItemHeadingColor: colors.layout.sidebar.menuItemHeadingColor,\n      boxShadow: 'none',\n      width: '280px'\n    },`;\n\n  return (\n    <ContentWrapper title=\"Themes Customization - Tokyo React Admin Dashboard\">\n      <Container maxWidth={false}>\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <PageHeader\n              heading=\"Themes Customization\"\n              subheading=\"\"\n            ></PageHeader>\n          </Grid>\n          <Grid item xs={12}>\n            <Typography paragraph>\n              Tokyo React Admin Dashboard come with 5 predefined color schemes.\n            </Typography>\n            <Typography paragraph>\n              Three of them are 'light' color schemes: <code>Pure Light</code>,{' '}\n              <code>Light Bloom</code> and <code>Grey Goose</code>. The other\n              two are 'dark' color schemes: <code>Nebula Fighter</code> and{' '}\n              <code>Dark Spaces</code>.\n            </Typography>\n            <Typography paragraph>\n              If you're looking to use only a single color scheme, then take a\n              look at the starter kit we've bundled with the downloaded zip\n              archive.\n            </Typography>\n            <br />\n            <Typography paragraph>\n              You can find all the theme logic inside the{' '}\n              <code>/src/theme/</code> folder. Switch between themes using the\n              top right 'cog' menu.\n            </Typography>\n            <Prism\n              showLineNumbers\n              wrapLines\n              language=\"javascript\"\n              style={a11yDark}\n            >\n              {themeDir}\n            </Prism>\n            <br />\n            <Typography variant=\"h2\" sx={{ mb: 2 }}>\n              Custom Schemes\n            </Typography>\n            <Typography paragraph>\n              Each color scheme has it's individual file making it easy to\n              create new ones or modify existing.\n            </Typography>\n            <Typography paragraph>\n              For example, if you were to modify the sidebar style for the{' '}\n              <code>Light Bloom</code> theme you would have to edit sidebar\n              colors section inside{' '}\n              <code>src\\theme\\schemes\\LightBloomTheme.ts</code>:\n            </Typography>\n            <Prism\n              showLineNumbers\n              wrapLines\n              language=\"javascript\"\n              style={a11yDark}\n            >\n              {themeCustom}\n            </Prism>\n          </Grid>\n        </Grid>\n      </Container>\n    </ContentWrapper>\n  );\n}\n\nexport default ThemesCustomization;\n","import PropTypes from 'prop-types';\n\nimport { useTranslation } from 'react-i18next';\nimport { experimentalStyled } from '@material-ui/core/styles';\nimport { Typography, Box, Divider } from '@material-ui/core';\n\nconst RootWrapper = experimentalStyled(Box)(\n  ({ theme }) => `\n        margin-top: ${theme.spacing(5)};\n`\n);\n\nconst PageHeader = ({ heading, subheading, ...rest }) => {\n  const { t } = useTranslation();\n\n  return (\n    <RootWrapper {...rest}>\n      {heading && <Typography variant=\"h1\">{t(heading)}</Typography>}\n      {subheading && (\n        <Typography variant=\"subtitle2\">{t(subheading)}</Typography>\n      )}\n      <Divider sx={{ mt: 5 }} />\n    </RootWrapper>\n  );\n};\n\nPageHeader.propTypes = {\n  heading: PropTypes.string,\n  subheading: PropTypes.string\n};\n\nexport default PageHeader;\n"],"sourceRoot":""}